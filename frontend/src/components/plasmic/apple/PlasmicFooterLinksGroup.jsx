// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4SWmLChNCXaLuZnDt9Byj4
// Component: bSGFkh2ICSy8
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import FooterLink from "../../FooterLink"; // plasmic-import: JQYhEwN0Q6yL/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 4SWmLChNCXaLuZnDt9Byj4/projectcss
import sty from "./PlasmicFooterLinksGroup.module.css"; // plasmic-import: bSGFkh2ICSy8/css

createPlasmicElementProxy;

export const PlasmicFooterLinksGroup__VariantProps = new Array();

export const PlasmicFooterLinksGroup__ArgProps = new Array(
  "groupName",
  "links"
);

const $$ = {};

function PlasmicFooterLinksGroup__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          links: [{ url: "#", label: "Hello" }]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"categoryNameContainer"}
        data-plasmic-override={overrides.categoryNameContainer}
        className={classNames(projectcss.all, sty.categoryNameContainer)}
      >
        {renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.groupName,
          className: classNames(sty.slotTargetGroupName)
        })}
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.links;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <FooterLink
              data-plasmic-name={"footerLink"}
              data-plasmic-override={overrides.footerLink}
              className={classNames("__wab_instance", sty.footerLink)}
              key={currentIndex}
              label={(() => {
                try {
                  return currentItem.label;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              url={(() => {
                try {
                  return currentItem.url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          );
        })}
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "categoryNameContainer", "freeBox", "footerLink"],
  categoryNameContainer: ["categoryNameContainer"],
  freeBox: ["freeBox", "footerLink"],
  footerLink: ["footerLink"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooterLinksGroup__ArgProps,
          internalVariantPropNames: PlasmicFooterLinksGroup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooterLinksGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterLinksGroup";
  } else {
    func.displayName = `PlasmicFooterLinksGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterLinksGroup = Object.assign(
  // Top-level PlasmicFooterLinksGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    categoryNameContainer: makeNodeComponent("categoryNameContainer"),
    freeBox: makeNodeComponent("freeBox"),
    footerLink: makeNodeComponent("footerLink"),
    // Metadata about props expected for PlasmicFooterLinksGroup
    internalVariantProps: PlasmicFooterLinksGroup__VariantProps,
    internalArgProps: PlasmicFooterLinksGroup__ArgProps
  }
);

export default PlasmicFooterLinksGroup;
/* prettier-ignore-end */
