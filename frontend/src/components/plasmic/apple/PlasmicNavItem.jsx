// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4SWmLChNCXaLuZnDt9Byj4
// Component: Gqq7t4BwkFt8
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 4SWmLChNCXaLuZnDt9Byj4/projectcss
import sty from "./PlasmicNavItem.module.css"; // plasmic-import: Gqq7t4BwkFt8/css

createPlasmicElementProxy;

export const PlasmicNavItem__VariantProps = new Array("hasIconOnly");

export const PlasmicNavItem__ArgProps = new Array("text", "icon");

const $$ = {};

function PlasmicNavItem__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "hasIconOnly",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasIconOnly
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {(hasVariant($state, "hasIconOnly", "hasIconOnly") ? false : true)
          ? renderPlasmicSlot({
              defaultContents: "Store",
              value: args.text,
              className: classNames(sty.slotTargetText, {
                [sty.slotTargetTexthasIconOnly]: hasVariant(
                  $state,
                  "hasIconOnly",
                  "hasIconOnly"
                )
              })
            })
          : null}
        {(hasVariant($state, "hasIconOnly", "hasIconOnly") ? true : false)
          ? renderPlasmicSlot({
              defaultContents: (
                <svg
                  className={classNames(projectcss.all, sty.svg__dfPxy)}
                  role={"img"}
                />
              ),

              value: args.icon
            })
          : null}
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavItem__ArgProps,
          internalVariantPropNames: PlasmicNavItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavItem";
  } else {
    func.displayName = `PlasmicNavItem.${nodeName}`;
  }
  return func;
}

export const PlasmicNavItem = Object.assign(
  // Top-level PlasmicNavItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicNavItem
    internalVariantProps: PlasmicNavItem__VariantProps,
    internalArgProps: PlasmicNavItem__ArgProps
  }
);

export default PlasmicNavItem;
/* prettier-ignore-end */
